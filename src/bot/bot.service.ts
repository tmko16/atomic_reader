import { Injectable, OnModuleInit } from '@nestjs/common';
import { Bot, Context, InlineKeyboard, Keyboard } from 'grammy';
import { ContentService } from 'src/content/content.service';
import { FileFlavor, hydrateFiles } from '@grammyjs/files';
import { UserService } from 'src/user/user.service';
import fs from 'fs-extra';
type MyContext = FileFlavor<Context>;

@Injectable()
export class BotService implements OnModuleInit {
  public bot: Bot<MyContext>;

  constructor(
    private userService: UserService,
    private contentService: ContentService,
  ) {}

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  private getMainKeyboard() {
    return new Keyboard()
      .text('üìñ –ü–æ–ª—É—á–∏—Ç—å –∫—É—Å–æ—á–µ–∫')
      .text('üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
      .row()
      .text('‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è')
      .text('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
      .resized()
      .persistent();
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
  private async safeAnswerCallbackQuery(ctx: Context, text?: string) {
    try {
      await ctx.answerCallbackQuery(text);
    } catch (error) {
      console.warn('Callback query answer failed:', error.message);
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ timeout –¥–ª—è callback query
    }
  }

  onModuleInit() {
    const bot = new Bot<MyContext>(process.env.TG_TOKEN!);
    bot.api.config.use(hydrateFiles(bot.token));

    this.bot = bot;

    this.bot.command('start', async (ctx) => {
      const tg = ctx.from!;
      let user = await this.userService.findByTelegramId(tg.id);
      if (!user) {
        user = await this.userService.create({
          telegramId: tg.id,
          telegramUsername: tg.username,
        });
        await ctx.reply(
          '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Atomic Reader! üìö\n\n' +
            '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ —á–∞—Å—Ç—è–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
          { reply_markup: this.getMainKeyboard() },
        );
      } else {
        await ctx.reply(
          `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.telegramUserName || '–¥—Ä—É–≥'}! üëã\n\n` +
            '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
          { reply_markup: this.getMainKeyboard() },
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Reply Keyboard –∫–Ω–æ–ø–æ–∫
    this.bot.hears('üìñ –ü–æ–ª—É—á–∏—Ç—å –∫—É—Å–æ—á–µ–∫', async (ctx) => {
      const user = await this.userService.findByTelegramId(
        ctx.from?.id as number,
      );
      if (!user) {
        await ctx.reply(
          '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
        );
        return;
      }

      try {
        const chunk = await this.contentService.getNextChunk(user);
        if (!chunk) {
          await ctx.reply(
            '‚úÖ –§–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è!',
          );
          return;
        }

        await ctx.reply(chunk);
      } catch (error) {
        console.error('Error getting next chunk:', error);
        await ctx.reply(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    this.bot.hears('üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', async (ctx) => {
      await ctx.reply(
        'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è\n\n' +
          '‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –æ–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º.\n\n' +
          '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ —è –Ω–∞—á–Ω—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –µ–≥–æ –ø–æ —á–∞—Å—Ç—è–º!',
      );
    });

    this.bot.hears('‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è', async (ctx) => {
      await ctx.reply(
        '‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)\n' +
          '–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ –∫—É—Å–æ—á–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.',
      );
    });

    this.bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', async (ctx) => {
      await ctx.reply(
        '‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n' +
          'üìñ **–ü–æ–ª—É—á–∏—Ç—å –∫—É—Å–æ—á–µ–∫** - –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞\n' +
          'üìÅ **–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª** - –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π .txt —Ñ–∞–π–ª\n' +
          '‚è∞ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n' +
          '–ö–æ–º–∞–Ω–¥—ã:\n' +
          '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '/more - –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫—É—Å–æ—á–µ–∫ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–µ)\n\n' +
          '–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!',
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö inline –∫–Ω–æ–ø–æ–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    this.bot.callbackQuery('get_more', async (ctx) => {
      await this.safeAnswerCallbackQuery(ctx);
      const user = await this.userService.findByTelegramId(ctx.from?.id);
      if (!user) {
        await ctx.editMessageText(
          '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
        );
        return;
      }

      try {
        const chunk = await this.contentService.getNextChunk(user);
        if (!chunk) {
          await ctx.editMessageText(
            '‚úÖ –§–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è!',
          );
          return;
        }

        await ctx.editMessageText(chunk);
      } catch (error) {
        console.error('Error getting next chunk:', error);
        await ctx.editMessageText(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    this.bot.callbackQuery('upload_file', async (ctx) => {
      await this.safeAnswerCallbackQuery(ctx);
      await ctx.editMessageText(
        'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è\n\n' +
          '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ —è –Ω–∞—á–Ω—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –µ–≥–æ –ø–æ —á–∞—Å—Ç—è–º!',
      );
    });

    this.bot.callbackQuery('set_time', async (ctx) => {
      await this.safeAnswerCallbackQuery(ctx);
      await ctx.editMessageText(
        '‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)\n' +
          '–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ –∫—É—Å–æ—á–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.',
      );
    });

    this.bot.callbackQuery('main_menu', async (ctx) => {
      await this.safeAnswerCallbackQuery(ctx);
      await ctx.editMessageText('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
    });

    this.bot.on('message:document', async (ctx) => {
      const doc = ctx.message.document;
      if (!doc.mime_type?.includes('text'))
        return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.');

      const file = await ctx.getFile();
      const localPath = `./uploads/${file.file_id}.txt`;
      await fs.ensureDir('./uploads');
      await file.download(localPath);
      const content = await fs.readFile(localPath, 'utf-8');

      let user = await this.userService.findByTelegramId(ctx.from.id);
      if (!user) {
        user = await this.userService.create({
          telegramId: ctx.from.id,
          telegramUsername: ctx.from.username,
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const hadPreviousFile = !!user.content;
      
      await this.contentService.saveForUser(user, content);

      if (hadPreviousFile) {
        await ctx.reply(
          '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω!\n\n' +
            '–°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω, –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —á—Ç–µ–Ω–∏—é.\n' +
            '–ß—Ç–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.\n\n' +
            '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —á—Ç–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
        );
      } else {
        await ctx.reply(
          '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n' +
            '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —á—Ç–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
        );
      }
    });

    this.bot.hears(/^([0-1]\d|2[0-3]):([0-5]\d)$/, async (ctx) => {
      const [, h, m] = ctx.match;
      const sendAt = `${h}:${m}`;
      await this.userService.setSendAt(ctx.from?.id as number, sendAt);

      await ctx.reply(
        `‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ ${sendAt} ‚Äî –Ω–æ–≤—ã–π –∫—É—Å–æ—á–µ–∫.\n\n` +
          '–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?',
      );
    });

    this.bot.command('more', async (ctx) => {
      const user = await this.userService.findByTelegramId(
        ctx.from?.id as number,
      );
      if (!user) return;
      const chunk = await this.contentService.getNextChunk(user);
      if (!chunk) return ctx.reply('–§–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚úÖ');
      await ctx.reply(chunk);
    });

    this.bot.catch((err) => console.error(err));
    this.bot
      .start()
      .then(() => console.log('bot started'))
      .catch(() => console.log('bot not started'));
  }
}
